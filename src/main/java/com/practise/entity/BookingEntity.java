package com.practise.entity;

import jakarta.persistence.CascadeType;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import lombok.Data;

/**
 * Represents a booking entity in the system.
 * This class is a JPA entity class; hence it is automatically scanned and
 * used to create the table 'BookingEntity' in the database.
 */
@Entity
@Data
public class BookingEntity {

    /**
     * Unique ID of the booking.
     * It is automatically generated by the database when a booking entity is created.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private int bookingId;

    /**
     * Name of the passenger associated with the booking.
     */
    private String passengerName;

    /**
     * Age of the passenger associated with the booking.
     */
    private int age;

/**
 * Indicates the payment status of the booking.
 * If true, the payment for the booking has been completed successfully.
 * If false, the payment for the booking has not been completed, indicating the ticket is cancelled.
 */
private boolean paymentStatus;
    /**
     * The user who made the booking.
     * It is a many-to-one relationship with the UserEntity.
     * CascadeType.REFRESH indicates that if the UserEntity is updated, the changes
     * do not need to be cascaded to the BookingEntity.
     */
    @ManyToOne(cascade = CascadeType.REFRESH)
    @JoinColumn(name = "userEmail")
    private UserEntity user;

    /**
     * The ship associated with the booking.
     * It is a many-to-one relationship with the ShipEntity.
     * CascadeType.REFRESH indicates that if the ShipEntity is updated, the changes
     * do not need to be cascaded to the BookingEntity.
     */
    @ManyToOne(cascade = CascadeType.REFRESH)
    @JoinColumn(name = "shipId")
    private ShipEntity ship;
}